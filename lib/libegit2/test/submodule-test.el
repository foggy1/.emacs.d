(ert-deftest cloned-subdir ()
  (with-temp-dir (a path)
    (in-dir a (init) (commit-change "a" "abc"))
    (in-dir path
      (init)
      (run "git" "clone" a "somepath")
      (let* ((repo (libgit-repository-open path)))
        (should-error (libgit-submodule-lookup repo "somepath") :type 'giterr-submodule)))))

(ert-deftest status ()
  (with-temp-dir (a path)
    (in-dir a (init) (commit-change "a" "abc"))
    (in-dir path
      (init)
      (run "git" "submodule" "add" a "somepath")
      (let* ((repo (libgit-repository-open path)))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-index in-config in-wd index-added)))
        (commit)
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd)))
        (delete-file "somepath/a")
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-wd-modified)))
        (in-dir (concat path "somepath")
          (run "git" "reset" "--hard" "HEAD")
          (write "z" "changes"))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-untracked)))
        (in-dir (concat path "somepath")
          (add "z"))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-index-modified)))
        (in-dir (concat path "somepath")
          (set-user)
          (run "git" "checkout" "master")
          (commit))
        (should (equal (libgit-submodule-status repo "somepath")
                       '(in-head in-index in-config in-wd wd-modified)))
        ;; TODO: Figure out how to trigger all the other possible status values
        ))))

(ert-deftest ids ()
  (let (old-id new-id)
    (with-temp-dir (a path)
      (in-dir a
        (init)
        (commit-change "a" "abc")
        (setq old-id (libgit-reference-name-to-id (libgit-repository-open a) "HEAD")))
      (in-dir path
        (init)
        (run "git" "submodule" "add" "--name" "mymodule" a "somepath")
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "mymodule")))
          (should (string= "mymodule" (libgit-submodule-name sub)))
          (should (string= "somepath" (libgit-submodule-path sub)))
          (should (path= a (libgit-submodule-url sub)))
          (should (string= old-id (libgit-submodule-index-id sub)))
          (should (string= old-id (libgit-submodule-wd-id sub)))
          (should-not (libgit-submodule-head-id sub)))
        (commit)
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "mymodule")))
          (should (string= old-id (libgit-submodule-index-id sub)))
          (should (string= old-id (libgit-submodule-wd-id sub)))
          (should (string= old-id (libgit-submodule-head-id sub))))
        (in-dir (concat path "somepath")
          (set-user)
          (run "git" "checkout" "-b" "mybranch")
          (commit-change "b" "abc")
          (setq new-id (rev-parse)))
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "mymodule")))
          (should (string= old-id (libgit-submodule-index-id sub)))
          (should (string= new-id (libgit-submodule-wd-id sub)))
          (should (string= old-id (libgit-submodule-head-id sub))))
        (run "git" "add" "somepath")
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "somepath")))
          (should (string= new-id (libgit-submodule-index-id sub)))
          (should (string= new-id (libgit-submodule-wd-id sub)))
          (should (string= old-id (libgit-submodule-head-id sub))))
        (commit)
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-lookup repo "somepath")))
          (should (string= new-id (libgit-submodule-index-id sub)))
          (should (string= new-id (libgit-submodule-wd-id sub)))
          (should (string= new-id (libgit-submodule-head-id sub))))))))

(ert-deftest add ()
  (let (id)
    (with-temp-dir (a path)
      (in-dir a
        (init)
        (commit-change "a" "abc")
        (setq id (rev-parse)))
      (in-dir path
        (init)
        (let* ((repo (libgit-repository-open path))
               (sub (libgit-submodule-add-setup repo a "subdir" t)))
          (should (equal '(in-config in-wd) (libgit-submodule-status repo "subdir")))
          (should (string-match-p "\\[submodule \"subdir\"\\]" (read-file ".gitmodules")))
          (should (string-match-p "\\[submodule \"subdir\"\\]" (read-file ".git/config")))
          (should (file-exists-p "subdir"))
          (should (file-directory-p "subdir"))
          (let* ((subrepo (libgit-submodule-open sub)))
            (should (equal '("origin") (libgit-remote-list subrepo)))
            (libgit-remote-fetch (libgit-remote-lookup subrepo "origin"))
            (should (equal '(in-config in-wd) (libgit-submodule-status repo "subdir")))
            (let* ((ref (libgit-reference-lookup subrepo "refs/remotes/origin/master"))
                   (object (libgit-reference-peel ref)))
              (libgit-checkout-tree subrepo object))
            (should (equal '(in-config in-wd) (libgit-submodule-status repo "subdir")))
            (libgit-repository-set-head subrepo "refs/remotes/origin/master")
            (should (equal '(in-config in-wd wd-added) (libgit-submodule-status repo "subdir")))
            (should (string= "abc" (read-file "subdir/a")))
            (let ((index (libgit-repository-index repo)))
              (should (= 0 (libgit-index-entrycount index))))
            (libgit-submodule-add-finalize sub)
            (should (equal '(in-index in-config in-wd index-added) (libgit-submodule-status repo "subdir")))
            (let ((index (libgit-repository-index repo)))
              (should (= 2 (libgit-index-entrycount index)))
              (should (string= ".gitmodules" (libgit-index-entry-path (libgit-index-get-byindex index 0))))
              (should (string= "subdir" (libgit-index-entry-path (libgit-index-get-byindex index 1))))
              (should (string= id (libgit-index-entry-id (libgit-index-get-byindex index 1)))))))))))

(ert-deftest repo-init ()
  (with-temp-dir (a path)
    (in-dir a (init) (commit-change "a" "abc"))
    (in-dir path
      (init)
      (write ".gitmodules" (format "\
[submodule \"test\"]
	path = test
	url = %s
" a))
      (let* ((repo (libgit-repository-open path)))
        (let ((sub (libgit-submodule-lookup repo "test")))
          (should-not (string-match-p "\\[submodule \"test\"\\]" (read-file ".git/config")))
          (libgit-submodule-init sub)
          (should (string-match-p "\\[submodule \"test\"\\]" (read-file ".git/config")))
          (let ((subrepo (libgit-submodule-repo-init sub t)))
            (should (file-exists-p "test"))
            (should (file-directory-p "test"))
            (should (string= "gitdir: ../.git/modules/test/" (read-file-nnl "test/.git")))))
        (libgit-submodule-set-url repo "test" "http://github.com/nothing")
        (should (string-match-p "github" (read-file ".gitmodules")))
        (should-not (string-match-p "github" (read-file ".git/config")))
        (should-not (string-match-p "github" (read-file ".git/modules/test/config")))
        (let ((sub (libgit-submodule-lookup repo "test")))
          (libgit-submodule-sync sub))
        (should (string-match-p "github" (read-file ".gitmodules")))
        (should (string-match-p "github" (read-file ".git/config")))
        (should (string-match-p "github" (read-file ".git/modules/test/config")))))))

(ert-deftest config ()
  (with-temp-dir path
    (init)
    (write ".gitmodules" "\
[submodule \"test\"]
        path = test
        url = http://github.com/nothing
")
    (let* ((repo (libgit-repository-open path))
           (sub (libgit-submodule-lookup repo "test")))
      (libgit-submodule-init sub)

      (should-not (libgit-submodule-branch sub))
      (libgit-submodule-set-branch repo "test" "somebranch")
      (should-not (libgit-submodule-branch sub))
      (libgit-submodule-reload sub)
      (should (string= "somebranch" (libgit-submodule-branch sub)))
      (should (string-match-p "branch = somebranch" (read-file ".gitmodules")))
      (should-not (string-match-p "branch = somebranch" (read-file ".git/config")))

      (should (string= "http://github.com/nothing" (libgit-submodule-url sub)))
      (libgit-submodule-set-url repo "test" "http://github.com/nowhere")
      (should (string= "http://github.com/nothing" (libgit-submodule-url sub)))
      (libgit-submodule-reload sub)
      (should (string= "http://github.com/nowhere" (libgit-submodule-url sub)))
      (should (string-match-p "url = http://github\\.com/nowhere" (read-file ".gitmodules")))
      (should-not (string-match-p "http://github\\.com/nowhere" (read-file ".git/config")))
      (libgit-submodule-sync sub)
      (should (string-match-p "http://github\\.com/nowhere" (read-file ".git/config"))))))
