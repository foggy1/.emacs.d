(ert-deftest reflog-read ()
  (with-temp-dir path
    (let (id1 id2 id3)
      (init)
      (commit-change "a" "abcdef" "A message")
      (setq id1 (rev-parse))
      (commit-change "a" "ghijkl" "Another message")
      (setq id2 (rev-parse))
      (commit-change "a" "mnopqr" "More messages")
      (setq id3 (rev-parse))
      (let* ((repo (libgit-repository-open path))
             (log (libgit-reflog-read repo "HEAD")))
        (should (= 3 (libgit-reflog-entrycount log)))
        (let ((e1 (libgit-reflog-entry-byindex log 0))
              (e2 (libgit-reflog-entry-byindex log 1))
              (e3 (libgit-reflog-entry-byindex log 2)))
          (should (string= "commit: More messages" (libgit-reflog-entry-message e1)))
          (should (string= "commit: Another message" (libgit-reflog-entry-message e2)))
          (should (string= "commit (initial): A message" (libgit-reflog-entry-message e3)))
          (should (string= "A U Thor" (libgit-signature-name (libgit-reflog-entry-committer e1))))
          (should (string= "A U Thor" (libgit-signature-name (libgit-reflog-entry-committer e2))))
          (should (string= "A U Thor" (libgit-signature-name (libgit-reflog-entry-committer e3))))
          (should (string= "author@example.com" (libgit-signature-email (libgit-reflog-entry-committer e1))))
          (should (string= "author@example.com" (libgit-signature-email (libgit-reflog-entry-committer e2))))
          (should (string= "author@example.com" (libgit-signature-email (libgit-reflog-entry-committer e3))))
          (should (string= id3 (libgit-reflog-entry-id e1 'new)))
          (should (string= id2 (libgit-reflog-entry-id e1)))
          (should (string= id2 (libgit-reflog-entry-id e2 'new)))
          (should (string= id1 (libgit-reflog-entry-id e2)))
          (should (string= id1 (libgit-reflog-entry-id e3 'new)))
          (should (string= (make-string 40 ?0) (libgit-reflog-entry-id e3))))))))

(ert-deftest reflog-rename ()
  (with-temp-dir path
    (init)
    (commit-change "a" "abcdef" "A message")
    (commit-change "a" "ghijkl" "Another message")
    (commit-change "a" "mnopqr" "More messages")
    (let* ((repo (libgit-repository-open path))
           (contents (read-file ".git/logs/refs/heads/master")))
      ;; New reference doesn't need to actually exist
      (libgit-reflog-rename repo "refs/heads/master" "refs/heads/otherbranch")
      (should (string= contents (read-file ".git/logs/refs/heads/otherbranch")))
      (should-error (read-file ".git/logs/refs/heads/master") :type 'file-error)
      ;; A branch isn't actually created, either
      (should-error (read-file ".git/refs/heads/otherbranch") :type 'file-error))))

(ert-deftest reflog-append-write ()
  (let (id)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (setq id (rev-parse))
      (let* ((repo (libgit-repository-open path))
             (log (libgit-reflog-read repo "HEAD"))
             (contents (read-file ".git/logs/HEAD")))
        (libgit-reflog-append
         log "0123456789abcdef0123456789abcdef01234567"
         (libgit-signature-now "Zeus" "zeus@olympus.gr")
         "Fake!")
        (should (string= contents (read-file ".git/logs/HEAD")))
        (libgit-reflog-write log)
        (should-not (string= contents (read-file ".git/logs/HEAD")))
        (let* ((newlog (libgit-reflog-read repo "HEAD"))
               (entry (libgit-reflog-entry-byindex newlog 0)))
          (should (= 2 (libgit-reflog-entrycount newlog)))
          (should (string= "0123456789abcdef0123456789abcdef01234567"
                           (libgit-reflog-entry-id entry 'new)))
          (should (string= id (libgit-reflog-entry-id entry)))
          (should (string= "Zeus" (libgit-signature-name (libgit-reflog-entry-committer entry))))
          (should (string= "zeus@olympus.gr" (libgit-signature-email (libgit-reflog-entry-committer entry))))
          (should (string= "Fake!" (libgit-reflog-entry-message entry))))))))

(ert-deftest reflog-drop ()
  (let (id1 id2 id3)
    (with-temp-dir path
      (init)
      (commit-change "a" "abcdef")
      (setq id1 (rev-parse))
      (commit-change "b" "abcdef")
      (setq id2 (rev-parse))
      (commit-change "c" "abcdef")
      (setq id3 (rev-parse))
      (let* ((repo (libgit-repository-open path))
             (log1 (libgit-reflog-read repo))
             (log2 (libgit-reflog-read repo)))
        (should (= 3 (libgit-reflog-entrycount log1)))
        (should (= 3 (libgit-reflog-entrycount log2)))
        (libgit-reflog-drop log1 1 t)
        (libgit-reflog-drop log2 1 nil)
        (let ((e1 (libgit-reflog-entry-byindex log1 0))
              (e2 (libgit-reflog-entry-byindex log1 1)))
          (should (string= id3 (libgit-reflog-entry-id e1 'new)))
          (should (string= id1 (libgit-reflog-entry-id e1)))
          (should (string= id1 (libgit-reflog-entry-id e2 'new)))
          (should (string= (make-string 40 ?0) (libgit-reflog-entry-id e2))))
        (let ((e1 (libgit-reflog-entry-byindex log2 0))
              (e2 (libgit-reflog-entry-byindex log2 1)))
          (should (string= id3 (libgit-reflog-entry-id e1 'new)))
          (should (string= id2 (libgit-reflog-entry-id e1)))
          (should (string= id1 (libgit-reflog-entry-id e2 'new)))
          (should (string= (make-string 40 ?0) (libgit-reflog-entry-id e2))))))))
